{"block":{"name":"code","text":"<p>Дана матрица фиксированного размера 10x10, ячейки в которые можно наступать обозначены за 1, преграды за 0. Также даны индексы двух ячеек - начальной и конечной, найдите и выведите кратчайшее расстояние между этими ячейками.<br>\nЕсли пути не существует выведите -1.<br>\nТакже вам дана вспомогательная структура Cell в которой хранятся индексы клетки и ее расстояние.</p>\n\n<p><br>\nПример:</p>\n\n<pre><code class=\"language-no-highlight\">1 1 0 1 1 0 0 1 1 1\n0 1 0 1 1 1 0 1 0 1\n0 1 0 0 1 1 1 0 0 1\n0 1 1 1 1 0 1 1 0 1\n0 0 0 1 0 0 0 1 0 1\n1 0 1 1 1 0 0 1 1 0\n0 0 0 0 1 0 0 1 0 1\n0 1 1 1 1 1 1 1 0 0\n1 1 1 1 1 0 0 1 1 1\n0 0 1 0 0 1 1 0 0 1</code></pre>\n\n<p>Найти кратчайшее расстояние между ячейками с индексами 0 0 и 3 3.</p>\n\n<p>Вывод:</p>\n\n<pre><code class=\"language-no-highlight\">6</code></pre>","video":null,"options":{"execution_time_limit":5,"execution_memory_limit":256,"limits":{"java8":{"time":8,"memory":256},"c++11":{"time":5,"memory":256},"python3":{"time":15,"memory":256}},"code_templates":{"java8":"import java.util.*;\nclass Cell\n{\n\tint x, y, dist;\n\tCell(int x, int y, int dist) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.dist = dist;\n\t}\n}\nclass Labirinth\n{\n\tvoid Lee(int matrix[][], int i_start, int j_start, int i_end, int j_end)\n\t{\n\t\t//Write your code here.\n\t}\n}","c++11":"#include <iostream>\n#include <queue>\n#include <vector>\nusing namespace std;\nstruct Cell\n{\n    int x;\n    int y;\n    int dist;\n};\n\nvoid Lee(vector<vector<int>> matrix, int i_start, int j_start, int i_end, int j_end)\n{\n    //Write your code here.\n}","python3":"def Lee(matrix, i_start, j_start, i_end, j_end):\n\t# Write your code here."},"code_templates_header_lines_count":{"java8":0,"c++11":0,"python3":0},"code_templates_footer_lines_count":{"java8":18,"c++11":21,"python3":12},"code_templates_options":{},"samples":[],"is_run_user_code_allowed":false},"subtitle_files":[],"source":{"code":"# This is a sample Code Challenge\n# Learn more: https://stepik.org/lesson/9173\n# Ask your questions via support@stepik.org\n\ndef generate():\n    return []\n\ndef check(reply, clue):\n    return reply.strip() == clue.strip()\n\n# def solve(dataset):\n#     a, b = dataset.split()\n#     return str(int(a) + int(b))","execution_time_limit":5,"execution_memory_limit":256,"samples_count":0,"templates_data":"::java8\n::header\n::code\nimport java.util.*;\nclass Cell\n{\n\tint x, y, dist;\n\tCell(int x, int y, int dist) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.dist = dist;\n\t}\n}\nclass Labirinth\n{\n\tvoid Lee(int matrix[][], int i_start, int j_start, int i_end, int j_end)\n\t{\n\t\t//Write your code here.\n\t}\n}\n::footer\nclass Main {\n\t\n\tpublic static void main(String args[])\n\t{\n        Scanner scan = new Scanner(System.in);\n        int n = scan.nextInt();\n        int i_start = scan.nextInt();\n        int j_start = scan.nextInt();\n        int i_end = scan.nextInt();\n        int j_end = scan.nextInt();\n        int[][] matrix= new int[n][n];\n        for(int i = 0; i<n; i++)\n        \tfor(int j = 0; j<n; j++)\n        \t\tmatrix[i][j] = scan.nextInt();\n        Labirinth res = new Labirinth();\n        res.Lee(matrix, i_start, j_start, i_end, j_end); \n\t}\n}\n::c++11\n::footer\n::code\n#include <iostream>\n#include <queue>\n#include <vector>\nusing namespace std;\nstruct Cell\n{\n    int x;\n    int y;\n    int dist;\n};\n\nvoid Lee(vector<vector<int>> matrix, int i_start, int j_start, int i_end, int j_end)\n{\n    //Write your code here.\n}\n::footer\nint main()\n{\n    int n;\n    cin >> n;\n    int i_start,j_start, i_end, j_end;\n    cin >> i_start >> j_start >> i_end >> j_end;\n    vector<vector<int>> matrix;\n    for (int i = 0; i < n; i++)\n    {\n        vector<int> row;\n        for(int j = 0; j < n; j++)\n        {\n            int item;\n            cin >> item;\n            row.push_back(item);\n        }\n        matrix.push_back(row);\n    }\n    Lee(matrix, i_start, j_start, i_end, j_end);\n    return 0;\n}\n::python3\n::header\n::code\n\ndef Lee(matrix, i_start, j_start, i_end, j_end):\n\t# Write your code here.\n\n::footer\nif __name__ == '__main__':\n    matrix = []\n    m = int(input())\n    i_start, j_start = input().split()\n    i_end, j_end = input().split()\n    i_start = int(i_start)\n    j_start = int(j_start)\n    i_end = int(i_end)\n    j_end = int(j_end)\n    for i in range(m):\n        matrix.append([int(j) for j in input().split()])\n    Lee(matrix, i_start, j_start, i_end, j_end)","is_time_limit_scaled":true,"is_memory_limit_scaled":true,"is_run_user_code_allowed":false,"manual_time_limits":[],"manual_memory_limits":[],"test_archive":[],"test_cases":[["10\n0 0\n7 5\n1 1 1 1 1 0 0 1 1 1\n0 1 1 1 1 1 0 1 0 1\n0 0 1 0 1 1 1 0 0 1\n1 0 1 1 1 0 1 1 0 1\n0 0 0 1 0 0 0 1 0 1\n1 0 1 1 1 0 0 1 1 0\n0 0 0 0 1 0 0 1 0 1\n0 1 1 1 1 1 1 1 0 0\n1 1 1 1 1 0 0 1 1 1\n0 0 1 0 0 1 1 0 0 1","12"],["10\n0 0\n7 5\n1 1 0 1 1 0 0 1 1 1\n0 1 0 1 1 1 0 1 0 1\n0 0 0 0 1 1 1 0 0 1\n1 0 1 1 1 0 1 1 0 1\n0 0 0 1 0 0 0 1 0 1\n1 0 1 1 1 0 0 1 1 0\n0 0 0 0 1 0 0 1 0 1\n0 1 1 1 1 1 1 1 0 0\n1 1 1 1 1 0 0 1 1 1\n0 0 1 0 0 1 1 0 0 1","-1"],["10\n0 0\n0 0\n1 1 1 1 1 0 0 1 1 1\n0 1 0 1 1 1 0 1 0 1\n0 0 0 0 1 1 1 0 0 1\n1 0 1 1 1 0 1 1 0 1\n0 0 0 1 0 0 0 1 0 1\n1 0 1 1 1 0 0 1 1 0\n0 0 0 0 1 0 0 1 0 1\n0 1 1 1 1 1 1 1 0 0\n1 1 1 1 1 0 0 1 1 1\n0 0 1 0 0 1 1 0 0 1","0"],["10\n0 0\n3 3\n1 1 0 1 1 0 0 1 1 1\n0 1 0 1 1 1 0 1 0 1\n0 1 0 0 1 1 1 0 0 1\n0 1 1 1 1 0 1 1 0 1\n0 0 0 1 0 0 0 1 0 1\n1 0 1 1 1 0 0 1 1 0\n0 0 0 0 1 0 0 1 0 1\n0 1 1 1 1 1 1 1 0 0\n1 1 1 1 1 0 0 1 1 1\n0 0 1 0 0 1 1 0 0 1","6"],["10\n0 0\n4 4\n1 1 0 1 1 0 0 1 1 1\n0 1 0 1 1 1 0 1 0 1\n0 1 0 0 1 1 1 0 0 1\n0 1 0 1 1 0 1 1 0 1\n0 0 0 1 0 0 0 1 0 1\n1 0 1 1 1 0 0 1 1 0\n0 0 0 0 1 0 0 1 0 1\n0 1 1 1 1 1 1 1 0 0\n1 1 1 1 1 0 0 1 1 1\n0 0 1 0 0 1 1 0 0 1","-1"],["10\n0 0\n5 4\n1 1 0 1 1 0 0 1 1 1\n0 1 0 1 1 1 0 1 0 1\n0 1 0 0 1 1 1 0 0 1\n0 1 1 1 1 0 1 1 0 1\n0 0 0 1 0 0 0 1 0 1\n1 0 1 1 1 0 0 1 1 0\n0 0 0 0 1 0 0 1 0 1\n0 1 1 1 1 1 1 1 0 0\n1 1 1 1 1 0 0 1 1 1\n0 0 1 0 0 1 1 0 0 1","9"],["10\n9 9\n5 4\n1 1 0 1 1 0 0 1 1 1\n0 1 0 1 1 1 0 1 0 1\n0 1 0 0 1 1 1 0 0 1\n0 1 1 1 1 0 1 1 0 1\n0 0 0 1 0 0 0 1 0 1\n1 0 1 1 1 0 0 1 1 0\n0 0 0 0 1 0 0 1 0 1\n0 1 1 1 1 1 1 1 0 0\n1 1 1 1 1 0 0 1 1 1\n0 0 1 0 0 1 1 0 0 1","9"],["10\n9 9\n0 0\n1 1 0 1 1 0 0 1 1 1\n0 1 0 1 1 1 0 1 0 1\n0 1 0 0 1 1 1 0 0 1\n0 1 1 1 1 0 1 1 0 1\n0 0 0 1 0 0 0 1 0 1\n1 0 1 1 1 0 0 1 1 0\n0 0 0 0 1 0 0 1 0 1\n0 1 1 1 1 1 1 1 0 0\n1 1 1 1 1 0 0 1 1 1\n0 0 1 0 0 1 1 0 0 1","18"],["10\n0 0\n9 9\n1 1 0 1 1 0 0 1 1 1\n0 1 0 1 1 1 0 1 0 1\n0 1 0 0 1 1 1 0 0 1\n0 1 1 1 1 0 1 1 0 1\n0 0 0 1 0 0 0 1 0 1\n1 0 1 1 1 0 0 1 1 0\n0 0 0 0 1 0 0 1 0 1\n0 1 1 1 1 1 1 1 0 0\n1 1 1 1 1 0 0 1 1 1\n0 0 1 0 0 1 1 0 0 1","18"],["10\n0 0\n9 9\n1 1 0 1 1 0 0 1 1 1\n0 1 0 1 1 1 0 1 0 1\n0 1 0 0 1 1 1 0 0 1\n0 1 1 1 0 0 1 1 0 1\n0 0 0 0 0 0 0 1 0 1\n1 0 1 1 1 0 0 1 1 0\n0 0 0 0 1 0 0 1 0 1\n0 1 1 1 1 1 1 1 0 0\n1 1 1 1 1 0 0 1 1 1\n0 0 1 0 0 1 1 0 0 1","-1"]],"are_all_tests_scored":false,"are_all_tests_run":true},"subtitles":{},"tests_archive":"/api/step-sources/1456683/tests","feedback_correct":"","feedback_wrong":""},"id":"1456683","has_review":false,"time":"2020-09-06T14:52:49.085Z"}