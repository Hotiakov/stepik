{"block":{"name":"code","text":"<p>Вам дана матрица смежности, которая соответствует ориентированному взвешенному графу. Напишите функцию, которая реализовывает алгоритм Флойда-Уоршелла.<br>\n<br>\nПример:</p>\n\n<p style=\"text-align: center;\"><img alt=\"\" height=\"180\" src=\"https://ucarecdn.com/69b9b785-eeb5-4eeb-844a-172638202eaf/\" width=\"450\"></p>\n\n<p> Дан граф и соответствующая ему матрица смежности.<br>\n Тогда результирующая матрица будет иметь вид:<br>\n <img alt=\"\" height=\"198\" src=\"https://ucarecdn.com/82778efb-5d77-4c07-a97f-dfa4d7045c75/\" width=\"200\"><br>\n Формат вывода:</p>\n\n<pre><code class=\"language-no-highlight\">0 4 9 1\n10 0 5 7\n5 5 0 2\n3 3 8 0</code></pre>\n\n<p>Под бесконечным числом понимайте 9999.</p>","video":null,"options":{"execution_time_limit":5,"execution_memory_limit":256,"limits":{"java8":{"time":8,"memory":256},"c++11":{"time":5,"memory":256},"python3":{"time":15,"memory":256}},"code_templates":{"java8":"class FloydWarshall\n{\n\tfinal static int inf = 9999;\n\t  void floydWarshall(int graph[][]) \n          {\n\t\t  \t\t//Write your code here.\n\t\t  }","c++11":"#include <iostream>\n#include <vector>\nusing namespace std;\n\nvoid FloydWarshall(vector<vector<int>>)\n{\n    //Write your code here.\n}","python3":"inf = 9999\n\ndef FloydWarshall(graph):\n\t# Write your code here."},"code_templates_header_lines_count":{"java8":1,"c++11":0,"python3":0},"code_templates_footer_lines_count":{"java8":14,"c++11":15,"python3":6},"code_templates_options":{},"samples":[],"is_run_user_code_allowed":false},"subtitle_files":[],"source":{"code":"# This is a sample Code Challenge\n# Learn more: https://stepik.org/lesson/9173\n# Ask your questions via support@stepik.org\n\ndef generate():\n    return []\n\ndef check(reply, clue):\n    return reply.strip() == clue.strip()\n\n# def solve(dataset):\n#     a, b = dataset.split()\n#     return str(int(a) + int(b))","execution_time_limit":5,"execution_memory_limit":256,"samples_count":0,"templates_data":"::java8\n::header\nimport java.util.*;\n::code\nclass FloydWarshall\n{\n\tfinal static int inf = 9999;\n\t  void floydWarshall(int graph[][]) \n          {\n\t\t  \t\t//Write your code here.\n\t\t  }\n::footer\t\n}\nclass Main {\t\n\tpublic static void main(String args[])\n\t{\n        Scanner scan = new Scanner(System.in);\n        int n =scan.nextInt();\n        int[][] graph = new int[n][n];\n        for(int i =0; i<n;i++)\n        \tfor(int j=0; j<n;j++)\n        \t\tgraph[i][j] = scan.nextInt();\n        FloydWarshall res = new FloydWarshall();\n        res.floydWarshall(graph);        \n\t}\n}\n::c++11\n::header\n::code\n#include <iostream>\n#include <vector>\nusing namespace std;\n\nvoid FloydWarshall(vector<vector<int>>)\n{\n    //Write your code here.\n}\n::footer\nint main()\n{\n    int n;\n    cin >> n;\n    vector<vector<int>> matrix;\n    for (int i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n        {\n            int item;\n            cin >> item;\n            matrix[i].push_back(item);\n        }\n    FloydWarshall(matrix);\n    return 0;\n}\n::python3\n::header\n::code\ninf = 9999\n\ndef FloydWarshall(graph):\n\t# Write your code here.\n::footer\nif __name__ == '__main__':\n    matrix = []\n    m = int(input())\n    for i in range(m):\n        matrix.append([int(j) for j in input().split()])\n    FloydWarshall(matrix)","is_time_limit_scaled":true,"is_memory_limit_scaled":true,"is_run_user_code_allowed":false,"manual_time_limits":[],"manual_memory_limits":[],"test_archive":[],"test_cases":[["5\n0 9999 20 1 4\n6 0 9999 9999 9999\n9999 9999 0 3 9999\n9999 9999 9999 0 9999\n9999 1 9999 1 0","0  5  20  1  4  \n6  0  26  7  10  \n9999  9999  0  3  9999  \n9999  9999  9999  0  9999  \n7  1  27  1  0"],["5\n0 6 9999 9999 9999\n9999 0 4 20 1\n1 9999 0 9999 2\n9999 9999 9999 0 3\n9999 9999 9999 9999 0","0  6  10  26  7  \n5  0  4  20  1  \n1  7  0  27  2  \n9999  9999  9999  0  3  \n9999  9999  9999  9999  0"],["5\n0 6 9999 9999 9999\n9999 0 4 20 1\n1 9999 0 9999 2\n9999 9999 9999 0 3\n-1 9999 9999 9999 0","0  6  10  26  7  \n0  0  4  20  1  \n1  7  0  27  2  \n2  8  12  0  3  \n-1  5  9  25  0"],["5\n0 6 9999 9999 9999\n9999 0 4 20 1\n1 9999 0 9999 2\n9999 9999 9999 0 3\n-1 9999 1 9999 0","0  6  8  26  7  \n0  0  2  20  1  \n1  7  0  27  2  \n2  8  4  0  3  \n-1  5  1  25  0 "],["3\n0 1 4\n3 0 1\n6 2 0","0  1  2  \n3  0  1  \n5  2  0"],["2\n0 2\n1 0","0  2  \n1  0"],["4\n0 2 9999 9999 \n1 0 9999 -1\n8 9999 0 9999\n9999 9999 6 0","0  2  7  1  \n1  0  5  -1  \n8  10  0  9  \n14  16  6  0 "],["4\n0 2 9999 9999 \n1 0 9999 -1\n8 1 0 9999\n9999 -1 6 0","0  0  7  -1  \n-1  -2  5  -3  \n0  -1  0  -2  \n-2  -3  4  -4 "],["5\n0 2 7 9999 9999\n9999 0 -2 1 9999\n9999 9999 0 5 9999\n9999 9999 9999 0 6\n9999 4 9999 9999 0","0  2  0  3  9  \n9997  0  -2  1  7  \n9999  15  0  5  11  \n9999  10  8  0  6  \n9999  4  2  5  0 "],["5\n0 2 7 9999 6\n9999 0 -2 1 9999\n2 9999 0 5 10\n9999 1 9999 0 6\n9999 4 9999 9999 0","0  2  0  3  6  \n0  0  -2  1  6  \n2  4  0  5  8  \n1  1  -1  0  6  \n4  4  2  5  0 "]],"are_all_tests_scored":false,"are_all_tests_run":true},"subtitles":{},"tests_archive":"/api/step-sources/1455274/tests","feedback_correct":"","feedback_wrong":""},"id":"1455274","has_review":false,"time":"2020-08-01T19:04:40.339Z"}